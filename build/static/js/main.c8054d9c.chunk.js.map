{"version":3,"sources":["reducers/fetchCoinsReducer.js","actions/types.js","reducers/fetchDailyPriceReducer.js","reducers/fetchFootPrintsReducer.js","reducers/rootReducer.js","components/Nav.jsx","actions/fetchCoinsAction.js","actions/updateCoins.js","components/FetchCoins.jsx","actions/fetchDailyPriceAction.js","components/FootPrint.jsx","actions/fetchFootPrints.js","components/Charts.jsx","components/Routes.jsx","App.js","serviceWorker.js","index.js","store.js"],"names":["initialState","coins","isLoading","fetchCoinsReducer","state","action","type","payload","coinHistory","priceUsd","date","fetchCoinHistoryReducer","footPrints","fetchFootPrintsReducer","combineReducers","fetchDailyPriceReducer","MainNav","className","href","src","alt","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","fetchCoinsAction","dispatch","axios","get","then","response","data","catch","error","console","log","tradeWs","WebSocket","GetCoins","toggle","a","props","fetchDailyPriceAction","setState","isOpen","composeChart","chartData","map","each","stringDate","Date","toISOString","split","toString","push","this","handleDataUpdate","result","JSON","parse","coinData","coinId","findIndex","x","base","classn","newPriceUsd","coin","setInterval","nextProps","url","onMessage","handleData","bind","Row","style","justifyContent","Spinner","as","animation","size","role","aria-hidden","Table","hover","textAlign","index","key","onClick","rank","display","width","height","marginRight","symbol","toLocaleLowerCase","name","color","fontSize","marginBottom","value","marketCapUsd","decimalScale","displayType","thousandSeparator","prefix","volumeUsd24Hr","suffix","supply","changePercent24Hr","Modal","ModalBody","colors","curve","length","xtitle","ytitle","ModalFooter","Button","backgroundColor","borderColor","Component","connect","onmessage","msg","last7dayHistoryReverse","reverse","splice","withRouter","FootPrints","limit","fetchFootprintsAction","print","language","platform","user_agent","ip_address","latitude","longitude","city","country","chart","labels","datasets","hoverBackgroundColor","pieData","slice","foreach","pieDataSet","Routes","exact","path","component","FetchCoins","Charts","App","Boolean","window","location","hostname","match","ReactDOM","render","store","createStore","rootReducer","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c8054d9c.chunk.js","sourcesContent":["import { FETCH_COINS_SUCCESS } from '../actions/types';\n\n   const initialState = {\n    coins: [],\n    isLoading: true\n  };\n  \n  function fetchCoinsReducer(state = initialState, action = {}) {\n    switch (action.type) {\n      case FETCH_COINS_SUCCESS:\n        return {\n          ...state,\n          coins: action.payload,\n          isLoading: false\n        };\n      default:\n        return state;\n    }\n  }\n  \n  export default fetchCoinsReducer;","export const FETCH_COINS_SUCCESS = 'FETCH_COINS_SUCCESS';\nexport const FETCH_COINS_ERROR = 'FETCH_COINS_ERROR';\nexport const IS_LOADING = 'IS_LOADING';\n\nexport const COINS_UPDATE = 'COINS_UPDATE';\n\nexport const FETCH_COINS_HISTORY_SUCCESS = 'FETCH_COINS_HISTORY_SUCCESS';\nexport const FETCH_COINS_HISTORY_ERROR = 'FETCH_COINS_HISTORY_ERROR';\n\nexport const GET_LOCATION_SUCCESS = 'GET_LOCATION_SUCCESS';\nexport const GET_LOCATION_ERROR = 'GET_LOCATION_ERROR';\n\nexport const FETCH_FOOTPRINT_SUCCESS = 'FETCH_FOOTPRINT_SUCCESS';\nexport const FETCH_FOOTPRINT_ERROR = 'FETCH_FOOTPRINT_ERROR';\n","\nimport {FETCH_COINS_HISTORY_SUCCESS} from '../actions/types';\n\nconst initialState = {\n    coinHistory: {\n      priceUsd: null,\n      date: null\n    },\n     isLoading: true\n   };\n   \n   function fetchCoinHistoryReducer(state = initialState, action = {}) {\n     switch (action.type) {\n       case FETCH_COINS_HISTORY_SUCCESS:\n         return {\n           ...state,\n           coinHistory: action.payload,\n           isLoading: false\n         };\n       default:\n         return state;\n     }\n   } \n  \n  export default fetchCoinHistoryReducer;\n\n ","\nimport { FETCH_FOOTPRINT_SUCCESS } from '../actions/types';\n\nconst initialState = {\n    footPrints: [],\n    isLoading: true\n};\n\nfunction fetchFootPrintsReducer(state = initialState, action = {}) {\n switch (action.type) {\n   case FETCH_FOOTPRINT_SUCCESS:\n     return {\n       ...state,\n       footPrints: action.payload,\n       isLoading: false\n     };\n   default:\n     return state;\n }\n}\n\nexport default fetchFootPrintsReducer;","import { combineReducers } from 'redux';\nimport fetchCoinsReducer from './fetchCoinsReducer';\nimport fetchDailyPriceReducer from './fetchDailyPriceReducer';\nimport fetchFootPrintsReducer from './fetchFootPrintsReducer';\n\nexport default combineReducers({\n    fetchCoinsReducer,\n    fetchDailyPriceReducer,\n    fetchFootPrintsReducer,\n});\n","import React from 'react';\nimport './styles.css';\n\nfunction MainNav() {\n  return (\n    <div className=\"container-fluid border\">\n    <nav className=\"container navbar navbar-expand-lg navbar-light \">\n    <a className=\"navbar-brand\" href=\"/\"><img src='https://static.coincap.io/assets/icons/eos@2x.png' alt=\"logo\" /></a>\n    Bantu\n    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"/navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse\" id=\"navbarText\">\n      <ul className=\"navbar-nav mx-auto\">\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"/\">Coins <span className=\"sr-only\">(current)</span></a>\n        </li>\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"/chart\">Chart</a>\n        </li>\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"/footprint\">Footprint</a>\n        </li>\n        \n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"/\"><i className=\"fas fa-ellipsis-h\"></i></a>\n        </li>\n      </ul>\n    </div>\n  </nav>\n    </div>\n  )\n}\n\nexport default MainNav;\n","import axios from 'axios';\nimport {\n    FETCH_COINS_SUCCESS,\n    FETCH_COINS_ERROR,\n    IS_LOADING\n} from './types';\n\nexport const fetchCoinsSuccess = (payload) => ({\n     type: FETCH_COINS_SUCCESS,\n     payload\n   });\n\n   export const fetchCoinsFailure = payload => ({\n    type: FETCH_COINS_ERROR,\n    payload\n  });\n\n   export const Loading = () => ({\n    type: IS_LOADING\n  });\n\nexport const fetchCoinsAction = () => (dispatch) => {\n    dispatch(Loading());\n    axios.get(`https://api.coincap.io/v2/assets`\n      ).then((response) => {\n        dispatch(fetchCoinsSuccess(response.data));\n      }).catch((error) => {\n        console.log(error);\n        dispatch(fetchCoinsFailure(error.response));\n      });\n};\n","import {\n    COINS_UPDATE\n} from './types';\n\nexport const updateCoinData = (payload) => ({\n     type: COINS_UPDATE,\n     payload\n   });\n\nconst tradeWs = new WebSocket('wss://ws.coincap.io/trades/binance')\n\nexport const handleDataUpdate = (data) => (dispatch) => {\n    tradeWs.onmessage = function (msg) {\n        data = JSON.parse(msg.data);\n        dispatch(updateCoinData(data));\n    }\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router'\nimport NumberFormat from 'react-number-format';\nimport './styles.css';\nimport { Table, Button, Row, Modal, ModalBody, ModalFooter, Spinner} from 'reactstrap';\nimport { fetchCoinsAction } from '../actions/fetchCoinsAction';\nimport { handleDataUpdate } from '../actions/updateCoins';\nimport { fetchDailyPriceAction } from '../actions/fetchDailyPriceAction';\nimport Websocket from 'react-websocket';\nimport { AreaChart } from 'react-chartkick'\nimport 'chart.js'\n\nclass GetCoins extends Component {\n  constructor () {\n    super();\n    this.state = {\n      isOpen: false,\n      coins: {},\n    }\n  }\n\n  componentDidMount() {\n    const { fetchCoinsAction, handleDataUpdate } = this.props;\n    fetchCoinsAction();\n    handleDataUpdate()\n\n  }\n\n  handleData(data) {\n    let result = JSON.parse(data);\n    const coinData = this.state.coins\n    const coinId = coinData.data.findIndex(x => x.id === result.base);\n\n    if (coinId > -1) {\n      let classn;\n\n      const newPriceUsd = result.priceUsd;\n      const coin = coinData.data[coinId]\n\n      if (newPriceUsd > coin.priceUsd) {\n        classn = 'up';\n      } else if (newPriceUsd < coin.priceUsd) {\n        classn = 'down';\n      } else {\n        classn = '';\n      }\n\n      coinData.data[coinId].priceUsd = result.priceUsd\n      coinData.data[coinId].classn = classn\n    };\n    setInterval(async () => {\n      this.setState({\n        coins: coinData\n      });\n    }, 3000);\n  }\n\n\n\n  componentWillReceiveProps(nextProps) {\n    const coinData = nextProps.coins;\n    this.setState({\n      coins: coinData\n    });\n  }\n\n  toggle = async ({ id }) => {\n    await this.props.fetchDailyPriceAction(id);\n    this.setState({isOpen: !this.state.isOpen})\n  };\n\n  composeChart = () => {\n    const { coinHistory } = this.props;\n    const chartData = [];\n    coinHistory.map(each => {\n      const date = new Date(each.date).toISOString().split('T')[0];\n      const stringDate = date.toString();\n      return chartData.push([ [stringDate], each.priceUsd ])\n    }); \n    return chartData;\n  }\n\n  render () {\n    const { isLoading, coins } = this.props;\n    const { data } = coins;\n\n    return (\n      <div className='container'>\n        <Websocket url='wss://ws.coincap.io/trades/binance' onMessage={this.handleData.bind(this)}/>\n        <div className='row mt-5 '>\n          <div className='col-lg-12 col-sm-12 mt-4  '>\n            <h3 className='title-section'>\n              Top 100 Crypto-currencies by Market Capitalization\n            </h3>\n          </div>\n          <div className='col-lg-12 col-sm-12 mt-5'>\n          { isLoading ? \n              <Row style={{justifyContent: 'center'}}>\n                    <Spinner\n                        as=\"span\"\n                        animation=\"grow\"\n                        size=\"xl\"\n                        role=\"status\"\n                        aria-hidden=\"true\"\n                    />\n              </Row> :\n              <>\n            <Table hover>\n              <thead>\n                <tr>\n                  <th>Rank</th>\n                  <th>Name</th>\n                  <th style={{textAlign: 'right'}}>Market Cap</th>\n                  <th style={{textAlign: 'right'}}>Price</th>\n                  <th style={{textAlign: 'right'}}>Volume (24h)</th>\n                  <th style={{textAlign: 'right'}}>Circulating Supply</th>\n                  <th style={{textAlign: 'right'}}>Change (24h)</th>\n                </tr>\n              </thead>\n              <tbody>\n                {data.map((coin, index) => {\n                  return (\n                    <tr\n                    key={index}\n                    onClick={() => this.toggle(coin)}\n                    // style={{backgroundColor: '#8f8'}}\n                    className={coin.classn}\n                    >\n                    <td>{coin.rank}</td>\n                  <td>\n                    <div style={{display: 'flex'}}>\n                    <img style={{width: '30px', height: '30px', marginRight: '10px'}} alt='icon' src={`https://static.coincap.io/assets/icons/${coin.symbol.toLocaleLowerCase()}@2x.png`} />\n                    <div>\n                      {coin.name}\n                      <p style={{color: '#b5b8bb', fontSize: '12px', marginBottom: '10px'}}>{coin.symbol}</p></div>\n                      </div></td>\n                    <td style={{textAlign: 'right'}}>\n                    <NumberFormat\n                    value={coin.marketCapUsd}\n                    decimalScale={0}\n                    displayType={'text'}\n                    thousandSeparator={true}\n                    prefix={'$ '} />\n                    </td>\n                    <td style={{textAlign: 'right'}}>\n                    <NumberFormat\n                    value={coin.priceUsd}\n                    decimalScale={2}\n                    displayType={'text'}\n                    thousandSeparator={true}\n                    prefix={'$ '} />\n                    </td>\n                    <td style={{textAlign: 'right'}}>\n                    <NumberFormat\n                    value={coin.volumeUsd24Hr}\n                    decimalScale={0}\n                    displayType={'text'}\n                    thousandSeparator={true}\n                    suffix={`${' '} ${coin.symbol}`}/>\n                    </td>\n                    <td style={{textAlign: 'right'}}>\n                    <NumberFormat\n                    value={coin.supply}\n                    decimalScale={0}\n                    displayType={'text'}\n                    thousandSeparator={true}\n                    suffix={`${' '} ${coin.symbol}`} />\n                    </td>\n                    <td className={coin.changePercent24Hr > 0 ? 'change24-up' : 'change24-down'} style={{textAlign: 'right'}}>\n                    <NumberFormat\n                    value={coin.changePercent24Hr}\n                    decimalScale={3}\n                    displayType={'text'}\n                    thousandSeparator={true}\n                    suffix={ \" %\"} />\n                    </td>\n                  </tr>\n                  )\n                })\n                }\n              </tbody>\n            </Table>\n              </>\n              }\n          </div>\n        </div>\n        <Modal isOpen={this.state.isOpen} size='lg'>\n          \n          <ModalBody>\n          <AreaChart\n            colors={[\"#13b2bc\", \"#666\"]}\n            curve={true}\n            data={this.props.coinHistory.length > 0 && this.composeChart()}\n            prefix=\"$\"\n            xtitle=\"Date\"\n            ytitle=\"Price\"\n          /> \n        </ModalBody> \n          <ModalFooter>\n            <Button color=\"primary\" style={{backgroundColor: '#13b2bc', borderColor: '#13b2bc'}} onClick={this.toggle}>Close</Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  coins: state.fetchCoinsReducer.coins,\n  isLoading: state.fetchCoinsReducer.isLoading,\n  coinHistory: state.fetchDailyPriceReducer.coinHistory,\n});\n\nexport default connect(mapStateToProps, {\n  fetchCoinsAction, handleDataUpdate, fetchDailyPriceAction\n})(withRouter(GetCoins));","import axios from 'axios';\nimport {\n  IS_LOADING,\n  FETCH_COINS_HISTORY_SUCCESS,\n  FETCH_COINS_HISTORY_ERROR\n} from './types';\n\nexport const getCoinHistorySuccess = payload => ({\n  type: FETCH_COINS_HISTORY_SUCCESS,\n  payload\n});\n\nexport const getCoinHistoryFailure = payload => ({\n  type: FETCH_COINS_HISTORY_ERROR,\n  payload\n});\n\nexport const loading = () => ({\n  type: IS_LOADING\n});\n\nexport const fetchDailyPriceAction = coinId => (dispatch) => {\n \n  dispatch(loading());\n  axios.get(`https://api.coincap.io/v2/assets/${coinId}/history?interval=d1`\n  ).then((response) => {\n    const last7dayHistory = response.data && response.data.data.reverse().splice(0, 7);\n    const last7dayHistoryReverse = last7dayHistory.reverse();\n    dispatch(getCoinHistorySuccess(last7dayHistoryReverse));\n  }).catch((error) => {\n    dispatch(getCoinHistoryFailure(error.response.data));\n  });\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router'\nimport './styles.css';\nimport { Table, Row, Spinner} from 'reactstrap';\nimport { fetchFootprintsAction } from '../actions/fetchFootPrints';\n\n\nclass FootPrints extends Component {\n  constructor () {\n    super();\n    this.state = {\n      limit: 20,\n      isOpen: false,\n    }\n  }\n\ncomponentDidMount() {\n  const { fetchFootprintsAction } = this.props;\n  fetchFootprintsAction();\n\n  }\n\n  render () {\n    const { footPrints, isLoading } = this.props;\n    const { data } = footPrints;\n    console.log(isLoading)\n    return (\n      <div className='container'>\n        <div className='row mt-5 '>\n          <div className='col-lg-12 col-sm-12 mt-4  '>\n            <h3 className='title-section'>\n              Foot prints...\n            </h3>\n          </div>\n          <div className='col-lg-12 col-sm-12 mt-5'>\n          { isLoading ? \n              <Row style={{justifyContent: 'center'}}>\n                  <Spinner\n                      as=\"span\"\n                      animation=\"grow\"\n                      size=\"xl\"\n                      role=\"status\"\n                      aria-hidden=\"true\"\n                  />\n                </Row> :\n                <>\n                <Table hover>\n              <thead>\n                <tr>\n                  <th>Language</th>\n                  <th>Platform</th>\n                  <th>User Agent</th>\n                  <th>IP Address</th>\n                  <th>Latitude</th>\n                  <th>Longitude</th>\n                  <th>City</th>\n                  <th>Country</th>\n                </tr>\n              </thead>\n              <tbody>\n                {data.map((print, index) => {\n                  return (\n                    <tr key={index}>\n                    <td>{print.language}</td>\n                    <td>{print.platform}</td>\n                    <td>{print.user_agent}</td>\n                    <td>{print.ip_address}</td>\n                    <td>{print.latitude}</td>\n                    <td>{print.longitude}</td>\n                    <td>{print.city}</td>\n                    <td>{print.country}</td>\n                  </tr>\n                  )\n                })\n                }\n              </tbody>\n            </Table>\n              </>\n              }\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  footPrints: state.fetchFootPrintsReducer.footPrints,\n  isLoading: state.fetchFootPrintsReducer.isLoading,\n});\n\nexport default connect(mapStateToProps, {\n    fetchFootprintsAction\n})(withRouter(FootPrints));","import axios from 'axios';\nimport {\n    FETCH_FOOTPRINT_ERROR,\n    FETCH_FOOTPRINT_SUCCESS,\n    IS_LOADING\n} from './types';\n\nexport const fetchFootprintsSuccess = (payload) => ({\n     type: FETCH_FOOTPRINT_SUCCESS,\n     payload\n   });\n\n   export const fetchFootprintsFailure = payload => ({\n    type: FETCH_FOOTPRINT_ERROR,\n    payload\n  });\n\n   export const Loading = () => ({\n    type: IS_LOADING\n  });\n\nexport const fetchFootprintsAction = () => (dispatch) => {\n    dispatch(Loading());\n    axios.get(`https://bantu-api.herokuapp.com/footprints/list`\n      ).then((response) => {\n        dispatch(fetchFootprintsSuccess(response.data));\n      }).catch((error) => {\n        console.log(error);\n        dispatch(fetchFootprintsFailure(error.response));\n      });\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router'\nimport './styles.css';\nimport { Row, Spinner } from 'reactstrap';\nimport {fetchCoinsAction } from '../actions/fetchCoinsAction';\nimport { Doughnut } from 'react-chartjs-2';\n\nimport 'chart.js'\n\nclass GetCoins extends Component {\n  constructor () {\n    super();\n    this.state = {\n      limit: 20,\n      isOpen: false,\n      chart: {\n            labels: [],\n            datasets: [{\n                backgroundColor: [\n                '#B21F00',\n                '#C9DE00',\n                '#2FDE00',\n                '#00A6B4',\n                '#6800B4'\n                ],\n                hoverBackgroundColor: [\n                '#501800',\n                '#4B5000',\n                '#175000',\n                '#003350',\n                '#35014F'\n                ],\n                data: []\n            }]\n        }\n    }\n  }\n\ncomponentDidMount() {\n  const { fetchCoinsAction } = this.props;\n    fetchCoinsAction();\n    \n\n  }\n\n  render () {\n    const { coins, isLoading } = this.props;\n    const { data } = coins;\n    let pieData = [];\n    let labels = [];\n    if (data) {\n        data.slice(0,5).foreach((coin, index) => {\n            labels.push(coin.name)\n            pieData.push(coin.marketCapUsd)\n        })\n    }\n\n    const pieDataSet = {\n        labels,\n        datasets: [{\n            backgroundColor: [\n            '#B21F00',\n            '#C9DE00',\n            '#2FDE00',\n            '#00A6B4',\n            '#6800B4'\n            ],\n            hoverBackgroundColor: [\n            '#501800',\n            '#4B5000',\n            '#175000',\n            '#003350',\n            '#35014F'\n            ],\n            data: pieData\n        }]\n    }\n    return (\n      <div className='container'>\n        <div className='row mt-5 '>\n          <div className='col-lg-12 col-sm-12 mt-4  '>\n            <h3 className='title-section'>\n              Top 5 Cryptocurrencies by Market Capitalization\n            </h3>\n          </div>\n          <div className='col-lg-12 col-sm-12 mt-5'>\n          { isLoading ? \n              <Row style={{justifyContent: 'center'}}>\n                  <Spinner\n                      as=\"span\"\n                      animation=\"grow\"\n                      size=\"xl\"\n                      role=\"status\"\n                      aria-hidden=\"true\"\n                  />\n                </Row> :\n                <>\n              <Doughnut data={pieDataSet} />\n              </>\n              }\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  coins: state.fetchCoinsReducer.coins,\n  isLoading: state.fetchCoinsReducer.isLoading,\n});\n\nexport default connect(mapStateToProps, {\n  fetchCoinsAction\n})(withRouter(GetCoins));","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport MainNav from './Nav';\nimport FetchCoins from './FetchCoins';\nimport FootPrints from './FootPrint';\nimport Charts from './Charts';\n\n\nconst Routes = () => (\n  <BrowserRouter>\n    <div id=\"wrap\">\n      <MainNav />\n      <Switch>\n        <Route exact path=\"/\" component={FetchCoins} />\n        <Route exact path=\"/chart\" component={Charts} />\n        <Route exact path=\"/footprint\" component={FootPrints} />\n      </Switch>\n    </div>\n  </BrowserRouter>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n// import Routes from './components/Routes';\nimport Routes from './components/Routes';\n\nconst App = () => (\n  <BrowserRouter>\n  <Route component={Routes} />\n</BrowserRouter>\n);\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\n\nexport default function configureStore() {\n return createStore(\n  rootReducer,\n  compose(\n   applyMiddleware(thunk),\n   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n );\n}"],"sourceRoot":""}